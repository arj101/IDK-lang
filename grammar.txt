program        = expression ; //parsed as a block of expressions


expression =
	| forExpr
	| whileExpr
	| ifExpr
	| funExpr
	| stmtExpr
	| logicOr
        | letDecl
	| assignment
	| classDecl
	| classInstantiation

stmtExpr  =
        | returnStmt
	| printStmt
	

classDecl = class IDENTIFIER { fields? };

classInstantiation = "new" IDENTIFIER(arguments?);

fields = funExpr fields?

letDecl = "let" IDENTIFIER = expression

assignment = maybeCall "=" expression


forExpr = for expression ";"? expression ";"? expression ";"? do? expression
whileExpr = while expression do? expression

ifExpr = if expression then? expression (else expression)?
funExpr = fun IDENTIFIER?(parameters?) expression

parameters = IDENTIFIER ","? parameters?


logicOr = logicAnd ( "or" logicOr )? 
logicAnd = equality ( "and" logicAnd )?

equality = comparison ( ( "!=" | "==" ) equality )?
comparison = term ( ( ">=" | ">" | "<" | "<=" ) comparison )?
term = factor ( ( "-" | "+" ) term )?
factor = unary ( ( "/" | "*" ) factor )?

unary = ( "!" | "-" ) unary | maybeCall

maybeCall = primary call? ("." maybeCall )?

arrayElements = expression ","? arrayElements?

call = "(" arguments? ")" call?
arguments = expression ","? arguments?


primary = "true" | "false" | "null" | NUMBER | STRING | IDENTIFIER | "(" expression ")" | ("{" blockExpr | objectExpr "}") | arrayExpr

objectExpr = expression ":" expression ","? objectExpr
blockExpr = expression ";"? blockExpr?

arrayExpr = "[" arrayElements "]"
